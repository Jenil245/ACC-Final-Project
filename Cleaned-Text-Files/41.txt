https www javatpoint com runtime polymorphism java polymorphism java javatpoint polymorphism java javatpoint scroll top home java programs oops string exception multithreading collections javafx jsp spring spring boot projects interview questions java training basics java java object class java oops concepts naming convention object class method constructor static keyword keyword java inheritance inheritance aggregation has java polymorphism method overloading method overriding covariant return type super keyword instance initializer block final keyword runtime polymorphism dynamic binding instanceof operator java abstraction abstract class interface abstract vs interface java encapsulation package access modifiers encapsulation java array java array java oops misc object class object cloning math class wrapper class java recursion call value strictfp keyword javadoc tool command line arg object vs class overloading vs overriding java string java regex exception handling java inner classes java multithreading java i o java networking java awt events java swing javafx java applet java reflection java date java conversion java collection java jdbc java new features rmi internationalization interview questions next prev polymorphism java polymorphism java concept which we can perform single action different ways polymorphism derived from greek words poly morphs word poly means many morphs means forms so polymorphism means many forms two types polymorphism java compile time polymorphism runtime polymorphism we can perform polymorphism java method overloading method overriding you overload static method java example compile time polymorphism here we focus runtime polymorphism java runtime polymorphism java runtime polymorphism dynamic method dispatch process which call overridden method resolved runtime rather than compile time process overridden method called through reference variable superclass determination method called based object being referred reference variable let s first understand upcasting before runtime polymorphism upcasting reference variable parent class refers object child class known upcasting example class class b extends new b upcasting upcasting we can use reference variable class type interface type example interface i class class b extends implements i here relationship b class would b b i b object since object root class all classes java so we can write b object example java runtime polymorphism example we creating two classes bike splendor splendor class extends bike class overrides its run method we calling run method reference variable parent class since refers subclass object subclass method overrides parent class method subclass method invoked runtime since method invocation determined jvm compiler known runtime polymorphism class bike void run system out println running class splendor extends bike void run system out println running safely km public static void main string args bike b new splendor upcasting b run test now output running safely km java runtime polymorphism example bank consider scenario where bank class provides method get rate interest however rate interest may differ according banks example sbi icici axis banks providing rate interest note example also given method overriding upcasting class bank float getrateofinterest return class sbi extends bank float getrateofinterest return f class icici extends bank float getrateofinterest return f class axis extends bank float getrateofinterest return f class testpolymorphism public static void main string args bank b b new sbi system out println sbi rate interest b getrateofinterest b new icici system out println icici rate interest b getrateofinterest b new axis system out println axis rate interest b getrateofinterest test now output sbi rate interest icici rate interest axis rate interest java runtime polymorphism example shape class shape void draw system out println drawing class rectangle extends shape void draw system out println drawing rectangle class circle extends shape void draw system out println drawing circle class triangle extends shape void draw system out println drawing triangle class testpolymorphism public static void main string args shape s s new rectangle s draw s new circle s draw s new triangle s draw test now output drawing rectangle drawing circle drawing triangle java runtime polymorphism example animal class animal void eat system out println eating class dog extends animal void eat system out println eating bread class cat extends animal void eat system out println eating rat class lion extends animal void eat system out println eating meat class testpolymorphism public static void main string args animal new dog eat new cat eat new lion eat test now output eating bread eating rat eating meat java runtime polymorphism data member method overridden data members so runtime polymorphism can t achieved data members example given below both classes have data member speedlimit we accessing data member reference variable parent class which refers subclass object since we accessing data member which overridden hence access data member parent class always rule runtime polymorphism can t achieved data members class bike int speedlimit class honda extends bike int speedlimit public static void main string args bike obj new honda system out println obj speedlimit test now output java runtime polymorphism multilevel inheritance let s see simple example runtime polymorphism multilevel inheritance class animal void eat system out println eating class dog extends animal void eat system out println eating fruits class babydog extends dog void eat system out println drinking milk public static void main string args animal new animal new dog new babydog eat eat eat test now output eating eating fruits drinking milk try output class animal void eat system out println animal eating class dog extends animal void eat system out println dog eating class babydog extends dog public static void main string args animal new babydog eat test now output dog eating since babydog overriding eat method so eat method dog class invoked next topicstatic binding dynamic binding prev next videos join our youtube channel join now feedback send your feedback email protected help others please share learn latest tutorials splunk spss swagger transact sql tumblr reactjs regex reinforcement learning r programming rxjs react native python design patterns python pillow python turtle keras preparation aptitude reasoning verbal ability interview questions company questions trending technologies artificial intelligence aws selenium cloud computing hadoop reactjs data science angular blockchain git machine learning devops b tech mca dbms data structures daa operating system computer network compiler design computer organization discrete mathematics ethical hacking computer graphics software engineering web technology cyber security automata c programming c java net python programs control system data mining data warehouse javatpoint services javatpoint offers too many high quality services mail us email protected get more information about given services website designing website development java development php development wordpress graphic designing logo digital marketing page off page seo ppc content development corporate training classroom online training data entry training college campus javatpoint offers college campus training core java advance java net android hadoop php web technology python please mail your requirement email protected duration week week like subscribe us latest updates newsletter learn tutorialslearn javalearn data structureslearn c programminglearn c tutoriallearn c tutoriallearn php tutoriallearn html tutoriallearn javascript tutoriallearn jquery tutoriallearn spring tutorial our websitesjavatpoint comhindi comlyricsia comquoteperson comjobandplacement com our services website development android development website designing digital marketing summer training industrial training college campus training contact address g nd floor sec noida up india contact contact us subscribe us privacy policysitemap about me copyright www javatpoint com all rights reserved developed javatpoint

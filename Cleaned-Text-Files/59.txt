https www javatpoint com corejava interview questions core java interview questions javatpoint core java interview questions javatpoint scroll top home interview questions java sql python javascript angular selenium spring boot hr c data structure dbms html c c all interview interview tips job hr interview competency interview business analyst behavioral interview company interview company interview ibm interview infosys interview capgemini interview cognizant interview wipro interview accenture interview igate interview tcs interview hcl interview adobe interview microsoft interview dxc technology interview ericsson interview exl service interview indiamart interview intuit interview spacex interview sapient interview amazon interview technical interview c interview c interview data structure interview linux interview unix interview shell scripting networking interview ccna interview android interview cloud computing hadoop interview testing qtp interview selenium interview web services interview os interview excel interview seo interview digital marketing python interview django interview pascal interview ruby interview ruby rails interview memcached interview go interview openstack interview scala interview control systems electrical machines power system digital electronics robotics interview typescript interview swift interview blockchain interview bitcoin interview aws interview informatica interview qa interview react interview git interview j ee interview deep learning salesforce interview testng interview agile interview machine learning api testing algorithm java design pattern teradata tensorflow linq mainframe laravel jira jcl pytorch etl testing linked list datastage tableau sap abap daa computer graphics data science software engineering power bi xamarin ansible data warehouse ionic devops react native python pandas http interview kali linux interview powershell interview sharepoint interview talend interview microsoft azure interview r interview flutter interview matlab interview es interview rpa interview desktop support interview angular interview graphql interview vue js interview automation anywhere interview ai interview uipath interview blue prism interview ssis interview mobile computing interview itil interview sas interview elasticsearch interview entity framework interview rxjs interview accounting interview electron js interview knockout js interview top angular interview ias interview question banking interview interview questions freshers powerpoint interview bpo interview civil engineering interview apache spark interview data mining interview java support interview kubernetes interview web api interview scrum master interview system design interview ssb interview questions teachers interview questions finance interview questions technical support interview active directory interview appium interview cucumber interview full stack developer servicenow interview nursing interview sales interview microservices interview electrical engineering interview accounts payable interview visa interview vlsi interview autocad interview verilog interview oops interview web developer interview express js interview cakephp interview yii interview zend framework interview java concurrency interview symfony interview basic interview dynamic programming interview programming interview next js interview microsoft java interview aem interview svelte js interview cobol interview cyber security interview sql query interview bgp interview apache hive interview kafka interview embedded c interview pega interview kotlin interview sap mm interview ospf interview mobile testing interview mulesoft interview terraform interview salesforce lightning interview sccm interview postman interview content writer interview iot interview nlp interview splunk interview postgresql interview tricky java interview pyspark interview vba interview front end developer interview computer science interview data modeling interview google analytics interview sqoop interview web interview html interview css interview javascript interview jquery interview angularjs interview angular interview angular interview node js interview ajax interview xml interview dojo interview backbone js interview ember js interview xhtml interview xslt interview xpath interview xquery interview xforms interview sass interview coffeescript interview less interview perl interview pure css interview materialize interview framework interview svg interview sap fico interview ab initio interview php interview php interview wordpress interview joomla interview drupal interview magento interview codeigniter interview phalcon interview net interview net interview c interview asp net interview ado net interview wcf interview wpf interview silverlight interview f interview java interview java interview java interview exception string multithreading collections interview jdbc interview servlet interview jsp interview ejb interview struts interview hibernate interview spring interview spring boot interview spring mvc interview jpa interview maven interview junit interview jsf interview primefaces interview richfaces interview gwt interview jdb interview jogl interview jbpm interview jenkins interview java constructor interview technical architect interview array interview questions database interview dbms interview sql interview pl sql interview oracle interview mysql interview sql server interview mongodb interview cassandra interview db interview access interview sqlite interview couchdb interview neo j interview mariadb interview pouchdb interview redis interview core java interview questions set assurance interview questions list core java interview questions any core java interview question has been asked you kindly post ask question section we assure you get here frequently asked interview questions answers answers core java interview questions short point core java interview questions categorized basics java interview questions oops interview questions string handling interview questions multithreading interview questions collection interview questions jdbc interview questions etc core java basics java interview questions what java java high level object oriented robust secure programming language platform independent high performance multithreaded portable programming language developed james gosling june can also known platform provides its own jre api what differences between c java differences between c java given following table comparison index c java platform independent c platform dependent java platform independent mainly used c mainly used system programming java mainly used application programming widely used window web based enterprise mobile applications design goal c designed systems applications programming extension c programming language java designed created interpreter printing systems later extended support network computing designed goal being easy use accessible broader audience goto c supports goto statement java doesn t support goto statement multiple inheritance c supports multiple inheritance java doesn t support multiple inheritance through class can achieved interfaces java operator overloading c supports operator overloading java doesn t support operator overloading pointers c supports pointers you can write pointer program c java supports pointer internally however you can t write pointer program java means java has restricted pointer support java compiler interpreter c uses compiler only c compiled run using compiler which converts source code machine code so c platform dependent java uses compiler interpreter both java source code converted bytecode compilation time interpreter executes bytecode runtime produces output java interpreted why platform independent call value call reference c supports both call value call reference java supports call value only call reference java structure union c supports structures unions java doesn t support structures unions thread support c doesn t have built support threads relies third party libraries thread support java has built thread support documentation comment c doesn t support documentation comment java supports documentation comment create documentation java source code virtual keyword c supports virtual keyword so we can decide whether override function java has virtual keyword we can override all non static methods default other words non static methods virtual default unsigned right shift c doesn t support operator java supports unsigned right shift operator fills zero top negative numbers positive numbers works same like operator inheritance tree c creates new inheritance tree always java uses single inheritance tree always because all classes child object class java object class root inheritance tree java hardware c nearer hardware java so interactive hardware object oriented c object oriented language however c language single root hierarchy possible java also object oriented language however everything except fundamental types object java single root hierarchy everything gets derived from java lang object list features java programming language following features java programming language simple java easy learn syntax java based c which makes easier write program object oriented java follows object oriented paradigm which allows us maintain our code combination different type objects incorporates both data behavior portable java supports read once write anywhere approach we can execute java program every machine java program java converted bytecode class which can easily run every machine platform independent java platform independent programming language different from other programming languages like c c which needs platform executed java comes its platform which its code executed java doesn t depend upon operating system executed secured java secured because doesn t use explicit pointers java also provides concept bytecode exception handling which makes more secured robust java strong programming language uses strong memory management concepts like automatic garbage collection exception handling etc make more robust architecture neutral java architectural neutral dependent architecture c size data types may vary according architecture bit bit which doesn t exist java interpreted java uses just time jit interpreter along compiler program execution high performance java faster than other traditional interpreted programming languages because java bytecode close native code still little bit slower than compiled language e g c multithreaded we can write java programs deal many tasks once defining multiple threads main advantage multi threading doesn t occupy memory each thread shares common memory area threads important multi media web applications etc distributed java distributed because facilitates users create distributed applications java rmi ejb used creating distributed applications feature java makes us able access files calling methods from any machine internet dynamic java dynamic language supports dynamic loading classes means classes loaded demand also supports functions from its native languages i e c c what do you understand java virtual machine java virtual machine virtual machine enables computer run java program jvm acts like run time engine which calls main method present java code jvm specification which must implemented computer system java code compiled jvm bytecode which machine independent close native code what difference between jdk jre jvm jvm jvm acronym java virtual machine abstract machine which provides runtime environment which java bytecode can executed specification which specifies working java virtual machine its implementation has been provided oracle other companies its implementation known jre jvms available many hardware software platforms so jvm platform dependent runtime instance which created when we run java class three notions jvm specification implementation instance jre jre stands java runtime environment implementation jvm java runtime environment set software tools which used developing java applications used provide runtime environment implementation jvm physically exists contains set libraries other files jvm uses runtime jdk jdk acronym java development kit software development environment which used develop java applications applets physically exists contains jre development tools jdk implementation any one below given java platforms released oracle corporation standard edition java platform enterprise edition java platform micro edition java platform more details how many types memory areas allocated jvm many types class method area class area stores per class structures runtime constant pool field method data code methods heap runtime data area which memory allocated objects stack java stack stores frames holds local variables partial results plays part method invocation return each thread has private jvm stack created same time thread new frame created each time method invoked frame destroyed when its method invocation completes program counter register pc program counter register contains address java virtual machine instruction currently being executed native method stack contains all native methods used application more details what jit compiler just time jit compiler used improve performance jit compiles parts bytecode have similar functionality same time hence reduces amount time needed compilation here term compiler refers translator from instruction set java virtual machine jvm instruction set specific cpu what platform platform hardware software environment which piece software executed two types platforms software based hardware based java provides software based platform what main differences between java platform other platforms following differences between java platform other platforms java software based platform whereas other platforms may hardware platforms software based platforms java executed top other hardware platforms whereas other platforms can only have hardware components what gives java its write once run anywhere nature bytecode java compiler converts java programs class file byte code which intermediate language between source code machine code bytecode platform specific can executed any computer what classloader classloader subsystem jvm which used load class files whenever we run java program loaded first classloader three built classloaders java bootstrap classloader first classloader which superclass extension classloader loads rt jar file which contains all class files java standard edition like java lang package classes java net package classes java util package classes java io package classes java sql package classes etc extension classloader child classloader bootstrap parent classloader system classloader loads jar files located inside java home jre lib ext directory system application classloader child classloader extension classloader loads class files from classpath default classpath set current directory you can change classpath using cp classpath switch also known application classloader empty java file name valid source file name yes java allows save our java file java only we need compile javac java run java classname let s take simple example save java only class public static void main string args system out println hello java compile javac java run java compile javac java run java delete next main exit null keyword java i don t provide any arguments command line what value stored string array passed main method empty null empty null what i write static public void instead public static void program compiles runs correctly because order specifiers doesn t matter java what default value local variables local variables initialized any default value neither primitives nor object references what various access specifiers java java access specifiers keywords which used define access scope method class variable java four access specifiers given below public classes methods variables which defined public can accessed any class method protected protected can accessed class same package sub class class within same class default default accessible within package only default all classes methods variables default scope private private class methods variables defined private can accessed within class only what purpose static methods variables methods variables defined static shared among all objects class static part class object static variables stored class area we do need create object access variables therefore static used case where we need define variables methods which common all objects class example class simulating collection students college name college common attribute all students therefore college name defined static what advantages packages java various advantages defining packages java packages avoid name clashes package provides easier access control we can also have hidden classes visible outside used package easier locate related classes what output following java program class test public static void main string args system out println javatpoint system out println javatpoint output above code javatpoint javatpoint explanation first case treated numbers added now sum treated string concatenated string javatpoint therefore output javatpoint second case string javatpoint concatenated string javatpoint which concatenated javatpoint what output following java program class test public static void main string args system out println javatpoint system out println javatpoint output above code javatpoint javatpoint explanation first case numbers multiplied first result treated string concatenated string javatpoint produce output javatpoint second case numbers multiplied first because precedence multiplication higher than addition result treated string concatenated string javatpointto produce output javatpoint what output following java program class test public static void main string args int i i system out println hello javatpoint above code give compile time error because loop demands boolean value second part we providing integer value i e core java oops concepts initial oops interview questions given more than oops object oriented programming system interview questions however have been categorized many sections constructor interview questions static interview questions inheritance interview questions abstraction interview question polymorphism interview questions etc better understanding what object oriented paradigm programming paradigm based objects having data methods defined class which belongs object oriented paradigm aims incorporate advantages modularity reusability objects instances classes which interacts one another design applications programs following features object oriented paradigm follows bottom up approach program design focus data methods operate upon object s data includes concept like encapsulation abstraction which hides complexities from user show only functionality implements real time approach like inheritance abstraction etc examples object oriented paradigm c simula smalltalk python c etc what object object real time entity having some state behavior java object instance class having instance variables state object methods behavior object object class can created using new keyword what difference between object oriented programming language object based programming language following basic differences between object oriented language object based language object oriented languages follow all concepts oops whereas object based language doesn t follow all concepts oops like inheritance polymorphism object oriented languages do have inbuilt objects whereas object based languages have inbuilt objects example javascript has window object examples object oriented programming java c smalltalk etc whereas examples object based languages javascript vbscript etc what initial value object reference which defined instance variable all object references initialized null java core java oops concepts constructor interview questions what constructor constructor can defined special type method used initialize state object invoked when class instantiated memory allocated object every time object created using new keyword default constructor class called name constructor must similar class name constructor must have explicit return type more details how many types constructors used java based parameters passed constructors two types constructors java default constructor default constructor one which does accept any value default constructor mainly used initialize instance variable default values can also used performing some useful task object creation default constructor invoked implicitly compiler constructor defined class parameterized constructor parameterized constructor one which can initialize instance variables given values other words we can say constructors which can accept arguments called parameterized constructors what purpose default constructor purpose default constructor assign default value objects java compiler creates default constructor implicitly constructor class class student int id string name void display system out println id name public static void main string args student s new student student s new student s display s display test now output null null explanation above class you creating any constructor so compiler provides you default constructor here null values provided default constructor more details does constructor return any value ans yes constructor implicitly returns current instance class you can t use explicit return type constructor more details constructor inherited constructor inherited can you make constructor final constructor can t final can we overload constructors yes constructors can overloaded changing number arguments accepted constructor changing data type parameters consider following example class test int i public test int k i k public test int k int m system out println hi i am assigning value max k m i k m i k else i m public class main public static void main string args test test new test test test new test system out println test i system out println test i above program constructor test overloaded another constructor first call constructor constructor one argument called i initialized value however second call constructor constructor arguments called i initialized value what do you understand copy constructor java copy constructor java however we can copy values from one object another like copy constructor c many ways copy values one object another java constructor assigning values one object another clone method object class example we going copy values one object another using java constructor java program initialize values from one object another class student int id string name constructor initialize integer string student int i string n id i name n constructor initialize another object student student s id s id name s name void display system out println id name public static void main string args student s new student karan student s new student s s display s display test now output karan karan what differences between constructors methods many differences between constructors methods given below java constructor java method constructor used initialize state object method used expose behavior object constructor must have return type method must have return type constructor invoked implicitly method invoked explicitly java compiler provides default constructor you don t have any constructor class method provided compiler any case constructor name must same class name method name may may same class name what output following java program public class test test int int b system out println b b test int float b system out println b b public static void main string args byte byte b test test new test b output following program b here data type variables b i e byte gets promoted int first parameterized constructor two integer parameters called what output following java program class test int i public class main public static void main string args test test new test system out println test i output program because variable i initialized internally we know default constructor invoked implicitly constructor class variable i initialized since constructor class what output following java program class test int test test b test int int b test test b b public static void main string args test test new test system out println test test test test b compiler error program because call default constructor main method which present class however only one parameterized constructor class test therefore default constructor invoked constructor implicitly core java oops concepts static keyword interview questions what static variable static variable used refer common property all objects unique each object e g company name employees college name students etc static variable gets memory only once class area time class loading using static variable makes your program more memory efficient saves memory static variable belongs class rather than object program static variable class student int rollno string name static string college its student int r string n rollno r name n void display system out println rollno name college public static void main string args student s new student karan student s new student aryan s display s display test now output karan its aryan its more details what static method static method belongs class rather than object need create object call static methods static method can access change value static variable more details what restrictions applied java static methods two main restrictions applied static methods static method can use non static data member call non static method directly super cannot used static context non static why main method static because object required call static method we make main method non static jvm have create its object first call main method which lead extra memory allocation more details can we override static methods we can t override static methods what static block static block used initialize static data member executed before main method time classloading class static system out println static block invoked public static void main string args system out println hello main test now output static block invoked hello main more details can we execute program without main method ans possible before jdk using static block since jdk possible more details what static modifier removed from signature main method program compiles however runtime throws error nosuchmethoderror what difference between static class method instance method static class method instance method method declared static known static method method declared static known instance method we don t need create objects call static methods object required call instance methods non static instance members cannot accessed static context static method static block static nested class directly static non static variables both can accessed instance methods example public static int cube int n return n n n example public void msg can we make constructors static we know static context method block variable belongs class object since constructors invoked only when object created sense make constructors static however you try do so compiler show compiler error can we make abstract methods static java java we make abstract methods static become part class we can directly call which unnecessary calling undefined method completely useless therefore allowed can we declare static variables methods abstract class yes we can declare static variables methods abstract method we know requirement make object access static context therefore we can access static context declared inside abstract class using name abstract class consider following example abstract class test static int i static void testmethod system out println hi i am good public class testclass extends test public static void main string args test testmethod system out println i test i output hi i am good i core java oops concepts inheritance interview questions what keyword java keyword reference variable refers current object various uses keyword java can used refer current class properties instance methods variable constructors etc can also passed argument methods constructors can also returned from method current class instance more details what main uses keyword following uses keyword can used refer current class instance variable can used invoke current class method implicitly can used invoke current class constructor can passed argument method call can passed argument constructor call can used return current class instance from method can we assign reference variable cannot assigned any value because always points current class object final reference java however we try do so compiler error shown consider following example public class test public test null system out println test class constructor called public static void main string args test t new test output test java error cannot assign value final variable null error can keyword used refer static members yes possible use keyword refer static members because just reference variable which refers current class object however we know unnecessary access static variables through objects therefore best practice use refer static members consider following example public class test static int i public test system out println i public static void main string args test t new test output how can constructor chaining done using keyword constructor chaining enables us call one constructor from another constructor class respect current class object we can use keyword perform constructor chaining within same class consider following example which illustrates how can we use keyword achieve constructor chaining public class employee int id age string name address public employee int age age age public employee int id int age age id id public employee int id int age string name string address id age name name address address public static void main string args employee emp new employee vikas delhi system out println id emp id name emp name age emp age address emp address output id name vikas age address delhi what advantages passing method instead current class object itself we know refers current class object therefore must similar current class object however can two main advantages passing method instead current class object final variable therefore cannot assigned any new value whereas current class object might final can changed can used synchronized block what inheritance inheritance mechanism which one object acquires all properties behavior another object another class used code reusability method overriding idea behind inheritance java you can create new classes built upon existing classes when you inherit from existing class you can reuse methods fields parent class moreover you can add new methods fields your current class also inheritance represents relationship which also known parent child relationship five types inheritance java single level inheritance multi level inheritance multiple inheritance hierarchical inheritance hybrid inheritance multiple inheritance supported java through class more details why inheritance used java various advantages using inheritance java given below inheritance provides code reusability derived class does need redefine method base class unless needs provide specific implementation method runtime polymorphism cannot achieved without using inheritance we can simulate inheritance classes real time objects which makes oops more realistic inheritance provides data hiding base class can hide some data from derived class making private method overriding cannot achieved without inheritance method overriding we can give specific implementation some basic method contained base class which class superclass all classes object class superclass all other classes java why multiple inheritance supported java reduce complexity simplify language multiple inheritance supported java consider scenario where b c three classes c class inherits b classes b classes have same method you call from child class object ambiguity call method b class since compile time errors better than runtime errors java renders compile time error you inherit classes so whether you have same method different compile time error class void msg system out println hello class b void msg system out println welcome class c extends b suppose were public static void main string args c obj new c obj msg now which msg method would invoked test now compile time error what aggregation aggregation can defined relationship between two classes where aggregate class contains reference class owns aggregation best described has relationship example aggregate class employee having various fields age name salary also contains object address class having various fields address line city state pin code other words we can say employee class has object address class consider following example address java public class address string city state country public address string city string state string country city city state state country country employee java public class emp int id string name address address public emp int id string name address address id id name name address address void display system out println id name system out println address city address state address country public static void main string args address address new address gzb up india address address new address gno up india emp e new emp varun address emp e new emp arun address e display e display output varun gzb up india arun gno up india what composition holding reference class within some other class known composition when object contains other object contained object cannot exist without existence container object called composition other words we can say composition particular case aggregation which represents stronger relationship between two objects example class contains students student cannot exist without class exists composition between class students what difference between aggregation composition aggregation represents weak relationship whereas composition represents strong relationship example bike has indicator aggregation bike has engine composition why does java support pointers pointer variable refers memory address used java because unsafe unsecured complex understand what super java super keyword java reference variable used refer immediate parent class object whenever you create instance subclass instance parent class created implicitly which referred super reference variable super called class constructor implicitly compiler super class animal animal system out println animal created class dog extends animal dog system out println dog created class testsuper public static void main string args dog d new dog test now output animal created dog created more details how can constructor chaining done using super keyword class person string name address int age public person int age string name string address age age name name address address class employee extends person float salary public employee int age string name string address float salary super age name address salary salary public class test public static void main string args employee e new employee mukesh delhi system out println name e name salary e salary age e age address e address output name mukesh salary age address delhi what main uses super keyword following uses super keyword super can used refer immediate parent class instance variable super can used invoke immediate parent class method super can used invoke immediate parent class constructor what differences between super keyword following differences between super keyword super keyword always points parent class contexts whereas keyword always points current class context super keyword primarily used initializing base class variables within derived class constructor whereas keyword primarily used differentiate between local instance variables when passed class constructor super must first statement inside constructor otherwise compiler throw error what output following java program class person public person system out println person class constructor called public class employee extends person public employee system out println employee class constructor called public static void main string args employee e new employee output person class constructor called employee class constructor called explanation super implicitly invoked compiler super included explicitly within derived class constructor therefore case person class constructor called first employee class constructor called can you use super both constructor because super must first statement class constructor example public class test test super system out println test class object created public static void main string args test t new test output test java error call must first statement constructor what object cloning object cloning used create exact copy object clone method object class used clone object java lang cloneable interface must implemented class whose object clone we want create we don t implement cloneable interface clone method generates clonenotsupportedexception protected object clone throws clonenotsupportedexception more details core java oops concepts method overloading interview questions what method overloading method overloading polymorphism technique which allows us create multiple methods same name different signature we can achieve method overloading two ways changing number arguments changing data type arguments method overloading increases readability program method overloading performed figure out program quickly more details why method overloading possible changing return type java java method overloading possible changing return type program due avoid ambiguity class adder static int add int int b return b static double add int int b return b class testoverloading public static void main string args system out println adder add ambiguity test now output compile time error method add int int already defined class adder more details can we overload methods making them static we cannot overload methods just applying static keyword them number parameters types same consider following example public class animal void consume int system out println consumed static void consume int system out println consumed static public static void main string args animal new animal consume animal consume output animal java error method consume int already defined class animal static void consume int animal java error non static method consume int cannot referenced from static context animal consume errors can we overload main method yes we can have any number main methods java program using method overloading more details what method overloading type promotion type promotion method overloading we mean one data type can promoted another implicitly exact matching found displayed above diagram byte can promoted short int long float double short datatype can promoted int long float double char datatype can promoted int long float double so consider following example class overloadingcalculation void sum int long b system out println b void sum int int b int c system out println b c public static void main string args overloadingcalculation obj new overloadingcalculation obj sum now second int literal promoted long obj sum test now output what output following java program class overloadingcalculation void sum int long b system out println method invoked void sum long int b system out println b method invoked public static void main string args overloadingcalculation obj new overloadingcalculation obj sum now ambiguity output overloadingcalculation java error reference sum ambiguous obj sum now ambiguity both method sum int long overloadingcalculation method sum long int overloadingcalculation match error explanation two methods defined same name i e sum first method accepts integer long type whereas second method accepts long integer type parameter passed b we can tell which method called clear differentiation mentioned between integer literal long literal case ambiguity therefore compiler throw error core java oops concepts method overriding interview questions what method overriding subclass provides specific implementation method already provided its parent class known method overriding used runtime polymorphism implement interface methods rules method overriding method must have same name parent class method must have same signature parent class two classes must have relationship between them more details can we override static method you can t override static method because part class object why can we override static method because static method part class bound class whereas instance method bound object static gets memory class area instance gets memory heap can we override overloaded method yes difference between method overloading overriding method overloading method overriding method overloading increases readability program method overriding provides specific implementation method already provided its superclass method overloading occurs within class method overriding occurs two classes have relationship between them case parameters must different case parameters must same can we override private methods we cannot override private methods because scope private methods limited class we cannot access them outside class can we change scope overridden method subclass yes we can change scope overridden method subclass however we must notice we cannot decrease accessibility method following point must taken care while changing accessibility method private can changed protected public default protected can changed public default default can changed public public always remain public can we modify throws clause superclass method while overriding subclass yes we can modify throws clause superclass method while overriding subclass however some rules which followed while overriding case exception handling superclass method does declare exception subclass overridden method cannot declare checked exception can declare unchecked exception superclass method declares exception subclass overridden method can declare same subclass exception exception cannot declare parent exception what output following java program class base void method int system out println base class method called integer void method double d system out println base class method called double d d class derived extends base override void method double d system out println derived class method called double d d public class main public static void main string args new derived method output base class method called integer explanation method overloaded class base whereas derived class derived double type parameter method call integer passed can you have virtual functions java yes all functions java virtual default what covariant return type now since java possible override any method changing return type return type subclass overriding method subclass type known covariant return type covariant return type specifies return type may vary same direction subclass class get return class b extends b get return void message system out println welcome covariant return type public static void main string args new b get message test now output welcome covariant return type more details what output following java program class base public void basemethod system out println basemethod called class derived extends base public void basemethod system out println derived method called public class test public static void main string args base b new derived b basemethod output derived method called explanation method base class i e basemethod overridden derived class test class reference variable b type base class refers instance derived class here runtime polymorphism achieved between class base derived compile time presence method basemethod checked base class presence program compiled otherwise compiler error shown case basemethod present base class therefore compiled successfully however runtime checks whether basemethod has been overridden derived class so derived class method called otherwise base class method called case derived class overrides basemethod therefore derived class method called core java oops concepts final keyword interview questions what final variable java final variable used restrict user from updating we initialize final variable we can t change its value other words we can say final variable once assigned value can never changed after final variable which assigned any value can only assigned through class constructor class bike final int speedlimit final variable void run speedlimit public static void main string args bike obj new bike obj run end class test now output compile time error more details what final method we change any method final method we can t override more details class bike final void run system out println running class honda extends bike void run system out println running safely kmph public static void main string args honda honda new honda honda run test now output compile time error what final class we make any class final we can t inherit any subclasses final class bike class honda extends bike void run system out println running safely kmph public static void main string args honda honda new honda honda run test now output compile time error more details what final blank variable final variable initialized time declaration known final blank variable we can t initialize final blank variable directly instead we have initialize using class constructor useful case when user has some data which must changed others example pan number consider following example class student int id string name final string pan card number more details can we initialize final blank variable yes static we can initialize constructor static blank final variable can initialized only static block more details can you declare main method final yes we can declare main method public static final void main string args what output following java program class main public static void main string args final int i i system out println i output explanation since i blank final variable can initialized only once we have initialized therefore printed what output following java program class base protected final void getinfo system out println method base class public class derived extends base protected final void getinfo system out println method derived class public static void main string args base obj new base obj getinfo output derived java error getinfo derived cannot override getinfo base protected final void getinfo overridden method final error explanation getdetails method final therefore can overridden subclass can we declare constructor final constructor can never declared final because never inherited constructors ordinary methods therefore sense declare constructors final however you try do so compiler throw error can we declare interface final we cannot declare interface final because interface must implemented some class provide its definition therefore sense make interface final however you try do so compiler show error what difference between final method abstract method main difference between final method abstract method abstract method cannot final we need override them subclass give its definition next topicjava interview questions part next java basics interview questions java oops interview questions java multithreading interview questions java string exception interview questions java collection interview questions jdbc interview questions servlet interview questions jsp interview questions spring interview questions hibernate interview questions pl sql interview questions sql interview questions oracle interview questions android interview questions sql server interview questions mysql interview questions you may also like java interview questions sql interview questions python interview questions javascript interview questions angular interview questions selenium interview questions spring boot interview questions hr interview questions c programming interview questions c interview questions data structure interview questions dbms interview questions html interview questions ias interview questions manual testing interview questions oops interview questions net interview questions c interview questions reactjs interview questions networking interview questions php interview questions css interview questions node js interview questions spring interview questions hibernate interview questions aws interview questions accounting interview questions learn latest tutorials splunk spss swagger transact sql tumblr reactjs regex reinforcement learning r programming rxjs react native python design patterns python pillow python turtle keras preparation aptitude reasoning verbal ability interview questions company questions trending technologies artificial intelligence aws selenium cloud computing hadoop reactjs data science angular blockchain git machine learning devops b tech mca dbms data structures daa operating system computer network compiler design computer organization discrete mathematics ethical hacking computer graphics software engineering web technology cyber security automata c programming c java net python programs control system data mining data warehouse javatpoint services javatpoint offers too many high quality services mail us email protected get more information about given services website designing website development java development php development wordpress graphic designing logo digital marketing page off page seo ppc content development corporate training classroom online training data entry training college campus javatpoint offers college campus training core java advance java net android hadoop php web technology python please mail your requirement email protected duration week week like subscribe us latest updates newsletter learn tutorialslearn javalearn data structureslearn c programminglearn c tutoriallearn c tutoriallearn php tutoriallearn html tutoriallearn javascript tutoriallearn jquery tutoriallearn spring tutorial our websitesjavatpoint comhindi comlyricsia comquoteperson comjobandplacement com our services website development android development website designing digital marketing summer training industrial training college campus training contact address g nd floor sec noida up india contact contact us subscribe us privacy policysitemap about me copyright www javatpoint com all rights reserved developed javatpoint
